/* eslint-disable camelcase */
import fs from "fs";
import { ethers } from "hardhat";
import path from "path";

import { VerificationResistory__factory } from "../typechain-types";
import { DeterministicDeployer } from "./helpers/DeterministicDeployer";

async function main() {
  /*
   * world id
   */
  // this is obtained from
  // https://developer.worldcoin.org/
  const worldIDAddress = "0xABB70f7F39035586Da57B3c8136035f87AC0d2Aa";
  const actionId = "wid_staging_17c2f1a21976f1848a55ff7fdde682a0";

  /*
   * polygon id
   */
  // The CredentialAtomicQuerySigValidator contract is used to verify any claim-related zk proof generated by user using the credentialAtomicQuerySig circuit.
  // https://0xpolygonid.github.io/tutorials/contracts/overview/#credentialatomicquerysigvalidator
  const circuitId = "credentialAtomicQuerySig";

  // CredentialAtomicQuerySigValidator Mumbai address
  const validatorAddress = "0xb1e86C4c687B85520eF4fd2a0d14e81970a15aFB";

  // Query language: https://0xpolygonid.github.io/tutorials/verifier/verification-library/zk-query-language/
  const ageQuery = {
    schema: ethers.BigNumber.from("210459579859058135404770043788028292398"),
    slotIndex: 2,
    operator: 2,
    value: [20010101, ...new Array(63).fill(0).map((i) => 0)],
    circuitId,
  };

  /*
   * deployment
   */
  const VerificationResistory = await ethers.getContractFactory("VerificationResistory");
  const verificationResistory = await VerificationResistory.deploy(worldIDAddress, actionId);

  const result = {
    verificationResistory: verificationResistory.address,
  };

  /*
   * polygon id setup after deployment
   */
  const requestId = await verificationResistory.TRANSFER_REQUEST_ID();
  await verificationResistory.setZKPRequest(requestId, validatorAddress, ageQuery);
  fs.writeFileSync(path.join(__dirname, `../deployments.json`), JSON.stringify(result));
}

main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});
